<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Students - AttendPro</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .animated-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 25%, #ff6b6b 50%, #4ecdc4 75%, #45b7d1 100%);
            background-size: 400% 400%;
            animation: gradientBG 15s ease infinite;
        }
        
        @keyframes gradientBG {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            padding: 30px;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            animation: slideInUp 0.6s ease-out;
        }

        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .back-btn {
            background: linear-gradient(135deg, #6c757d, #495057);
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            margin-bottom: 30px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(108, 117, 125, 0.3);
        }

        .back-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
        }

        h1, h2 {
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 20px;
        }

        .add-student-form {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            padding: 25px;
            border-radius: 15px;
            border: 2px solid #dee2e6;
            margin-bottom: 30px;
            animation: fadeIn 0.8s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr auto;
            gap: 15px;
            align-items: end;
            margin-bottom: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        label {
            font-weight: 600;
            margin-bottom: 8px;
            color: #495057;
        }

        input[type="text"], input[type="number"] {
            padding: 12px 15px;
            border: 2px solid #dee2e6;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: white;
        }

        input[type="text"]:focus, input[type="number"]:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        .add-btn {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);
        }

        .add-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(40, 167, 69, 0.4);
        }

        .add-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .bulk-add-section {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            padding: 20px;
            border-radius: 15px;
            border: 2px solid #ffc107;
            margin-bottom: 20px;
        }

        .bulk-add-section h3 {
            color: #856404;
            margin-bottom: 15px;
        }

        .bulk-textarea {
            width: 100%;
            height: 120px;
            padding: 15px;
            border: 2px solid #ffc107;
            border-radius: 10px;
            font-family: inherit;
            font-size: 14px;
            resize: vertical;
            margin-bottom: 15px;
        }

        .bulk-textarea:focus {
            outline: none;
            border-color: #ffc107;
            box-shadow: 0 0 0 3px rgba(255, 193, 7, 0.1);
        }

        .bulk-add-btn {
            background: linear-gradient(135deg, #ffc107, #fd7e14);
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .bulk-add-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 193, 7, 0.4);
        }

        .bulk-input-container {
            margin-bottom: 15px;
        }

        .bulk-controls {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .bulk-clear-btn {
            background: linear-gradient(135deg, #6c757d, #495057);
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .bulk-clear-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
        }

        .bulk-preview {
            background: linear-gradient(135deg, #e3f2fd, #bbdefb);
            padding: 20px;
            border-radius: 15px;
            border: 2px solid #2196f3;
            margin-top: 20px;
            color: #0d47a1;
        }

        .bulk-preview h4 {
            color: #0d47a1;
            margin-bottom: 15px;
        }

        .preview-item {
            background: white;
            padding: 10px 15px;
            border-radius: 8px;
            margin-bottom: 8px;
            border: 1px solid #2196f3;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .preview-item:last-child {
            margin-bottom: 0;
        }

        .preview-name {
            font-weight: 600;
            color: #0d47a1;
        }

        .preview-roll {
            color: #666;
            font-size: 14px;
        }

        .students-list {
            animation: slideInUp 0.8s ease-out 0.2s both;
        }

        .student-item {
            background: linear-gradient(135deg, #ffffff, #f8f9fa);
            padding: 20px;
            margin-bottom: 15px;
            border-radius: 15px;
            border: 1px solid #dee2e6;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        }

        .student-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            border-color: #667eea;
        }

        .student-info {
            flex-grow: 1;
        }

        .student-name {
            font-weight: 600;
            font-size: 18px;
            color: #495057;
            margin-bottom: 5px;
        }

        .student-roll {
            color: #6c757d;
            font-size: 14px;
        }

        .delete-btn {
            background: linear-gradient(135deg, #dc3545, #c82333);
            color: white;
            padding: 8px 15px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 3px 10px rgba(220, 53, 69, 0.3);
            margin-left: 10px;
        }

        .delete-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(220, 53, 69, 0.4);
        }

        .qr-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 8px 15px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 3px 10px rgba(102, 126, 234, 0.3);
            margin-left: 10px;
        }

        .qr-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .student-actions {
            display: flex;
            align-items: center;
        }

        .success-message {
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            color: #155724;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            border: 1px solid #c3e6cb;
            animation: slideInDown 0.5s ease-out;
        }

        @keyframes slideInDown {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .error-message {
            background: linear-gradient(135deg, #f8d7da, #f5c6cb);
            color: #721c24;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            border: 1px solid #f5c6cb;
            animation: slideInDown 0.5s ease-out;
        }

        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        .floating-shapes {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .shape {
            position: absolute;
            opacity: 0.1;
            animation: float 6s ease-in-out infinite;
        }

        .shape:nth-child(1) {
            width: 80px;
            height: 80px;
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            border-radius: 50%;
            top: 20%;
            left: 10%;
            animation-delay: 0s;
        }

        .shape:nth-child(2) {
            width: 120px;
            height: 120px;
            background: linear-gradient(45deg, #4834d4, #686de0);
            border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;
            top: 60%;
            right: 15%;
            animation-delay: -2s;
        }

        .shape:nth-child(3) {
            width: 60px;
            height: 60px;
            background: linear-gradient(45deg, #00d2d3, #54a0ff);
            border-radius: 20px;
            top: 40%;
            left: 80%;
            animation-delay: -4s;
            transform: rotate(45deg);
        }

        @keyframes float {
            0%, 100% { 
                transform: translateY(0px) rotate(0deg); 
            }
            50% { 
                transform: translateY(-30px) rotate(180deg); 
            }
        }

        @media (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .student-item {
                flex-direction: column;
                gap: 15px;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <%- include('partials/navbar') %>
    
    <div class="animated-background"></div>
    <div class="floating-shapes">
        <div class="shape"></div>
        <div class="shape"></div>
        <div class="shape"></div>
    </div>

    <div class="container">
        <a href="/classdetail/<%= classDetail._id %>" class="back-btn">← Back to Class Detail</a>
        
        <h1>Manage Students - <%= classDetail.CLASSNAME %></h1>
        
        <div id="message-container"></div>
        
        <div class="add-student-form">
            <h2>Add New Student</h2>
            <form id="addStudentForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="name">Student Name:</label>
                        <input type="text" id="name" name="NAME" required placeholder="Enter student name">
                    </div>
                    <div class="form-group">
                        <label for="rollno">Roll Number:</label>
                        <input type="number" id="rollno" name="ROLLNO" required placeholder="Enter roll number">
                    </div>
                    <button type="submit" class="add-btn" id="addBtn">Add Student</button>
                </div>
            </form>
        </div>

        <div class="bulk-add-section">
            <h3>📝 Bulk Add Students (Quick Entry)</h3>
            <p><strong>Format:</strong> Name, Roll Number (one student per line)</p>
            <p><strong>Example:</strong><br>
            John Doe, 101<br>
            Jane Smith, 102<br>
            Mike Johnson, 103</p>
            
            <div class="bulk-input-container">
                <textarea class="bulk-textarea" id="bulkStudents" placeholder="Enter students in the format: Name, Roll Number&#10;Example:&#10;John Doe, 101&#10;Jane Smith, 102"></textarea>
                <div class="bulk-controls">
                    <button class="bulk-add-btn" onclick="addBulkStudents()" id="bulkAddBtn">Add All Students</button>
                    <button class="bulk-clear-btn" onclick="clearBulkForm()">Clear Form</button>
                </div>
            </div>
            
            <div class="bulk-preview" id="bulkPreview" style="display: none;">
                <h4>📋 Preview of Students to Add:</h4>
                <div id="previewList"></div>
            </div>
        </div>

        <div class="students-list">
            <h2>Students in this Class (<span id="studentCount"><%= students.length %></span>)</h2>
            <div id="studentsContainer">
                <% if (students && students.length > 0) { %>
                    <% students.forEach(student => { %>
                        <div class="student-item" data-id="<%= student._id %>">
                            <div class="student-info">
                                <div class="student-name"><%= student.NAME %></div>
                                <div class="student-roll">Roll No: <%= student.ROLLNO %></div>
                            </div>
                            <div class="student-actions">
                                <button class="qr-btn" onclick="generateQR('<%= student._id %>', '<%= student.NAME %>', '<%= student.ROLLNO %>')">
                                    📱 QR Code
                                </button>
                                <button class="delete-btn" onclick="deleteStudent('<%= student._id %>')">Delete</button>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <p style="text-align: center; color: #6c757d; padding: 40px;">No students enrolled in this class yet.</p>
                <% } %>
            </div>
        </div>
    </div>

    <script>
        // Add single student
        document.getElementById('addStudentForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const addBtn = document.getElementById('addBtn');
            const originalText = addBtn.textContent;
            
            try {
                addBtn.disabled = true;
                addBtn.textContent = 'Adding...';
                
                const response = await fetch('/classdetail/<%= classDetail._id %>/addstudent', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: new URLSearchParams(formData)
                });
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        showMessage('Student added successfully!', 'success');
                        addStudentToList(result.student);
                        this.reset();
                        updateStudentCount();
                    } else {
                        showMessage(result.message || 'Failed to add student', 'error');
                    }
                } else {
                    showMessage('Failed to add student', 'error');
                }
            } catch (error) {
                showMessage('Error adding student', 'error');
            } finally {
                addBtn.disabled = false;
                addBtn.textContent = originalText;
            }
        });

        // Add bulk students
        async function addBulkStudents() {
            const textarea = document.getElementById('bulkStudents');
            const studentsText = textarea.value.trim();
            
            if (!studentsText) {
                showMessage('Please enter students data', 'error');
                return;
            }
            
            const lines = studentsText.split('\n').filter(line => line.trim());
            const students = [];
            
            for (const line of lines) {
                const parts = line.split(',').map(part => part.trim());
                if (parts.length >= 2) {
                    students.push({
                        NAME: parts[0],
                        ROLLNO: parseInt(parts[1])
                    });
                }
            }
            
            if (students.length === 0) {
                showMessage('No valid students found. Please check the format.', 'error');
                return;
            }
            
            const bulkAddBtn = document.getElementById('bulkAddBtn');
            const originalText = bulkAddBtn.textContent;
            
            try {
                bulkAddBtn.disabled = true;
                bulkAddBtn.textContent = 'Adding Students...';
                
                const response = await fetch('/classdetail/<%= classDetail._id %>/addbulkstudents', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ students })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        showMessage(`${result.addedCount} students added successfully!`, 'success');
                        result.students.forEach(student => addStudentToList(student));
                        textarea.value = '';
                        updateStudentCount();
                        hideBulkPreview();
                    } else {
                        showMessage(result.message || 'Failed to add students', 'error');
                    }
                } else {
                    showMessage('Failed to add students', 'error');
                }
            } catch (error) {
                showMessage('Error adding students', 'error');
            } finally {
                bulkAddBtn.disabled = false;
                bulkAddBtn.textContent = originalText;
            }
        }

        // Clear bulk form
        function clearBulkForm() {
            document.getElementById('bulkStudents').value = '';
            hideBulkPreview();
        }

        // Show bulk preview
        function showBulkPreview() {
            const textarea = document.getElementById('bulkStudents');
            const studentsText = textarea.value.trim();
            
            if (!studentsText) {
                hideBulkPreview();
                return;
            }
            
            const lines = studentsText.split('\n').filter(line => line.trim());
            const students = [];
            
            for (const line of lines) {
                const parts = line.split(',').map(part => part.trim());
                if (parts.length >= 2) {
                    students.push({
                        NAME: parts[0],
                        ROLLNO: parseInt(parts[1])
                    });
                }
            }
            
            if (students.length > 0) {
                const previewList = document.getElementById('previewList');
                previewList.innerHTML = '';
                
                students.forEach(student => {
                    const previewItem = document.createElement('div');
                    previewItem.className = 'preview-item';
                    previewItem.innerHTML = `
                        <span class="preview-name">${student.NAME}</span>
                        <span class="preview-roll">Roll No: ${student.ROLLNO}</span>
                    `;
                    previewList.appendChild(previewItem);
                });
                
                document.getElementById('bulkPreview').style.display = 'block';
            } else {
                hideBulkPreview();
            }
        }

        // Hide bulk preview
        function hideBulkPreview() {
            document.getElementById('bulkPreview').style.display = 'none';
        }

        // Add event listener for bulk preview
        document.getElementById('bulkStudents').addEventListener('input', showBulkPreview);

        // Delete student
        async function deleteStudent(studentId) {
            if (!confirm('Are you sure you want to delete this student?')) {
                return;
            }
            
            try {
                const response = await fetch(`/classdetail/<%= classDetail._id %>/deletestudent/${studentId}`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    const studentElement = document.querySelector(`[data-id="${studentId}"]`);
                    studentElement.style.animation = 'slideOutRight 0.3s ease-out';
                    setTimeout(() => {
                        studentElement.remove();
                        updateStudentCount();
                        showMessage('Student deleted successfully!', 'success');
                    }, 300);
                } else {
                    showMessage('Failed to delete student', 'error');
                }
            } catch (error) {
                showMessage('Error deleting student', 'error');
            }
        }

        // Helper functions
        function addStudentToList(student) {
            const container = document.getElementById('studentsContainer');
            const studentElement = document.createElement('div');
            studentElement.className = 'student-item';
            studentElement.setAttribute('data-id', student._id);
            studentElement.style.animation = 'slideInRight 0.3s ease-out';
            
            studentElement.innerHTML = `
                <div class="student-info">
                    <div class="student-name">${student.NAME}</div>
                    <div class="student-roll">Roll No: ${student.ROLLNO}</div>
                </div>
                <div class="student-actions">
                    <button class="qr-btn" onclick="generateQR('${student._id}', '${student.NAME}', '${student.ROLLNO}')">
                        📱 QR Code
                    </button>
                    <button class="delete-btn" onclick="deleteStudent('${student._id}')">Delete</button>
                </div>
            `;
            
            container.appendChild(studentElement);
        }

        function updateStudentCount() {
            const count = document.querySelectorAll('.student-item').length;
            document.getElementById('studentCount').textContent = count;
        }

        function showMessage(message, type) {
            const container = document.getElementById('message-container');
            const messageElement = document.createElement('div');
            messageElement.className = type === 'success' ? 'success-message' : 'error-message';
            messageElement.textContent = message;
            
            container.appendChild(messageElement);
            
            setTimeout(() => {
                messageElement.remove();
            }, 5000);
        }

        // Generate QR Code for student
        async function generateQR(studentId, studentName, rollNo) {
            try {
                const response = await fetch(`/student/${studentId}/qrcode`);
                const data = await response.json();
                
                if (data.success) {
                    showQRModal(data.qrCode, data.portalUrl, studentName, rollNo);
                } else {
                    showMessage('Failed to generate QR code: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Error generating QR code:', error);
                showMessage('Failed to generate QR code', 'error');
            }
        }

        // Show QR Code Modal
        function showQRModal(qrCodeDataUrl, portalUrl, studentName, rollNo) {
            // Remove existing modal if any
            const existingModal = document.getElementById('qrModal');
            if (existingModal) {
                existingModal.remove();
            }

            // Create modal
            const modal = document.createElement('div');
            modal.id = 'qrModal';
            modal.innerHTML = `
                <div class="qr-modal-overlay" onclick="closeQRModal()">
                    <div class="qr-modal-content" onclick="event.stopPropagation()">
                        <div class="qr-modal-header">
                            <h3>📱 QR Code for ${studentName}</h3>
                            <button class="qr-modal-close" onclick="closeQRModal()">×</button>
                        </div>
                        <div class="qr-modal-body">
                            <div class="qr-code-display">
                                <img src="${qrCodeDataUrl}" alt="Student Portal QR Code" />
                            </div>
                            <div class="qr-info">
                                <p><strong>Student:</strong> ${studentName}</p>
                                <p><strong>Roll No:</strong> ${rollNo}</p>
                                <p class="qr-instructions">
                                    <i>📱 Students can scan this QR code to instantly access their portal</i>
                                </p>
                                <div class="qr-actions">
                                    <button class="qr-download-btn" onclick="downloadQRCode('${qrCodeDataUrl}', '${rollNo}')">
                                        📥 Download QR Code
                                    </button>
                                    <button class="qr-share-btn" onclick="shareQRCode('${portalUrl}', '${studentName}', '${rollNo}')">
                                        🔗 Share Link
                                    </button>
                                </div>
                                <div class="qr-url">
                                    <small>Direct Link: <a href="${portalUrl}" target="_blank">${portalUrl}</a></small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);
            
            // Add modal styles
            const modalStyle = document.createElement('style');
            modalStyle.textContent = `
                .qr-modal-overlay {
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0, 0, 0, 0.8);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    z-index: 1000;
                    animation: fadeIn 0.3s ease;
                }
                
                .qr-modal-content {
                    background: white;
                    border-radius: 20px;
                    max-width: 500px;
                    width: 90%;
                    max-height: 90vh;
                    overflow-y: auto;
                    animation: slideInUp 0.3s ease;
                }
                
                .qr-modal-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    padding: 20px 25px;
                    border-bottom: 1px solid #dee2e6;
                    background: linear-gradient(135deg, #667eea, #764ba2);
                    color: white;
                    border-radius: 20px 20px 0 0;
                }
                
                .qr-modal-header h3 {
                    margin: 0;
                    font-size: 1.2rem;
                }
                
                .qr-modal-close {
                    background: none;
                    border: none;
                    color: white;
                    font-size: 24px;
                    cursor: pointer;
                    padding: 0;
                    width: 30px;
                    height: 30px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    border-radius: 50%;
                    transition: background 0.3s ease;
                }
                
                .qr-modal-close:hover {
                    background: rgba(255, 255, 255, 0.2);
                }
                
                .qr-modal-body {
                    padding: 25px;
                    text-align: center;
                }
                
                .qr-code-display {
                    margin-bottom: 20px;
                }
                
                .qr-code-display img {
                    max-width: 256px;
                    width: 100%;
                    border-radius: 15px;
                    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
                }
                
                .qr-info p {
                    margin: 10px 0;
                    color: #495057;
                }
                
                .qr-instructions {
                    background: #e3f2fd;
                    padding: 15px;
                    border-radius: 10px;
                    color: #0d47a1 !important;
                    margin: 20px 0 !important;
                }
                
                .qr-actions {
                    display: flex;
                    gap: 10px;
                    justify-content: center;
                    margin: 20px 0;
                    flex-wrap: wrap;
                }
                
                .qr-download-btn, .qr-share-btn {
                    padding: 10px 20px;
                    border: none;
                    border-radius: 10px;
                    cursor: pointer;
                    font-weight: 600;
                    transition: all 0.3s ease;
                }
                
                .qr-download-btn {
                    background: linear-gradient(135deg, #28a745, #20c997);
                    color: white;
                }
                
                .qr-share-btn {
                    background: linear-gradient(135deg, #007bff, #0056b3);
                    color: white;
                }
                
                .qr-download-btn:hover, .qr-share-btn:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
                }
                
                .qr-url {
                    margin-top: 15px;
                    padding-top: 15px;
                    border-top: 1px solid #dee2e6;
                }
                
                .qr-url a {
                    color: #667eea;
                    text-decoration: none;
                    word-break: break-all;
                }
                
                .qr-url a:hover {
                    text-decoration: underline;
                }
                
                @keyframes slideInUp {
                    from {
                        opacity: 0;
                        transform: translateY(30px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }
            `;
            document.head.appendChild(modalStyle);
        }

        // Close QR Modal
        function closeQRModal() {
            const modal = document.getElementById('qrModal');
            if (modal) {
                modal.style.animation = 'fadeOut 0.3s ease';
                setTimeout(() => {
                    modal.remove();
                }, 300);
            }
        }

        // Download QR Code
        function downloadQRCode(qrCodeDataUrl, rollNo) {
            const link = document.createElement('a');
            link.download = `student-qr-${rollNo}.png`;
            link.href = qrCodeDataUrl;
            link.click();
        }

        // Share QR Code
        function shareQRCode(portalUrl, studentName, rollNo) {
            if (navigator.share) {
                navigator.share({
                    title: 'Student Portal Access',
                    text: `Access student portal for ${studentName} (Roll: ${rollNo})`,
                    url: portalUrl
                });
            } else {
                // Fallback: copy to clipboard
                navigator.clipboard.writeText(portalUrl).then(() => {
                    showMessage('Link copied to clipboard!', 'success');
                }).catch(() => {
                    // Fallback for older browsers
                    const textArea = document.createElement('textarea');
                    textArea.value = portalUrl;
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                    showMessage('Link copied to clipboard!', 'success');
                });
            }
        }

        // Add CSS for animations
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideInRight {
                from {
                    opacity: 0;
                    transform: translateX(30px);
                }
                to {
                    opacity: 1;
                    transform: translateX(0);
                }
            }
            
            @keyframes slideOutRight {
                from {
                    opacity: 1;
                    transform: translateX(0);
                }
                to {
                    opacity: 0;
                    transform: translateX(30px);
                }
            }
        `;
        document.head.appendChild(style);
    </script>
</body>
</html> 